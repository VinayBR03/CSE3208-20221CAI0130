# -*- coding: utf-8 -*-
"""AI_Lab04.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-GaO01MlbPAcrvyZinNAYddU_2kebodb
"""

frontier=[]
explored=[]
ans=[]
def greedy_best_first_search(nodes,edges,H,adj,initial_node,goal_node):
  global frontier,explored,ans
  frontier.append((H[initial_node],initial_node))
  if(initial_node==goal_node):
    print(goal_node)
    return
  while(len(frontier)!=0):
    frontier.sort(key=lambda x:x[0])
    print(frontier)
    node=frontier.pop(0)
    ans.append(node[-1])
    if node in explored:
      continue
    explored.append(node)
    if node[-1]==goal_node:
      print('->'.join(ans))
      return True
    frontier=[]
    for i in adj[node[-1]]:
      if i not in explored:
        frontier.append((H[i[-1]],i[-1]))
  return False

nodes=['A','B','C','E','F','G','H','I']
edges = [('A','C',118),('A','E',140),('A','B',75),('E','G',80),('E','F',90),('F','I',211),('G','H',97),('H','I',101)]
H = dict([('A',366), ('B',374), ('C',329), ('D',244),('E',253),('F',178), ('G',193), ('H',98),('I',0)])
adj = {
    'A':[(118,'C'),(75,'B'),(140,'E')],
    'B':[],
    'C':[],
    'E':[(90,'F'),(80,'G')],
    'F':[(211,'I')],
    'G':[(97,'H')],
    'H':[(101,'I')],
    'I':[]
}
import networkx as nx
G1=nx.Graph()
G1.add_nodes_from(nodes)
G1.add_weighted_edges_from(edges)
weight=nx.get_edge_attributes(G1,'weight')
nx.draw(G1,pos=nx.spring_layout(G1),with_labels=True)
nx.draw_networkx_edge_labels(G1,pos=nx.spring_layout(G1),edge_labels=weight)

if greedy_best_first_search(nodes,edges,H,adj,nodes[0],nodes[-1]):
  print('Goal Found')
else:
  print('Goal Not Found')

ans=[]
nodes=['S','A','B','C','E','F','H','I','G']
edges = [('S','A',3),('S','B',2),('A','C',4),('A','D',1),('B','E',3),('B','F',1),('E','H',5),('F','I',2),('F','G',3)]
H = dict([('A',12), ('B',4), ('C',7), ('D',3),('E',8),('F',2), ('G',0), ('H',4),('I',9),('S',13)])
adj = {
    'S':[(3,'A'),(2,'B')],
    'A':[(4,'C'),(1,'D')],
    'B':[(3,'E'),(1,'F')],
    'C':[],
    'D':[],
    'E':[(5,'H')],
    'F':[(2,'I'),(3,'G')],
    'G':[],
    'H':[],
    'I':[]
}

if greedy_best_first_search(nodes,edges,H,adj,'S','G'):
  print('Goal Found')
else:
  print('Goal Not Found')